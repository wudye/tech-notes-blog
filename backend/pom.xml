<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.6</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.mwu</groupId>
    <artifactId>backend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>backend</name>
    <description>backend</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>21</java.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>

<!--         You do not need to manually add both javax.mail-api and-->
<!--         javax.mail if you already import spring-boot-starter-mail.-->
<!--         The starter will transitively include the necessary JavaMail-->
<!--          dependencies for sending emails.-->

<!--          Adding them explicitly is only needed if you want-->
<!--          a specific version or if your project setup requires direct access to JavaMail classes. For most Spring Boot projects, you can safely remove these two dependencies and rely on spring-boot-starter-mail alon-->
<!--                Java Mail API-->
<!--        <dependency>-->
<!--            <groupId>javax.mail</groupId>-->
<!--            <artifactId>javax.mail-api</artifactId>-->
<!--            <version>1.6.2</version>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>com.sun.mail</groupId>-->
<!--            <artifactId>javax.mail</artifactId>-->
<!--            <version>1.6.2</version>-->
<!--        </dependency>-->
        <!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.8.13</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>

        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity6</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

<!--        spring-boot-starter-test already includes JUnit (and other testing libraries) as-->
<!--        transitive dependencies. Adding both is usually harmless, but it is redundant. -->
<!--        If you specify a different version of JUnit, Maven may use your specified-->
<!--        version instead of the one provided by the starter. For most cases,-->
<!--        you only need spring-boot-starter-test for testing in Spring Boot projects.-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

<!--        Lettuce is default one-->
<!--        but in yml I set jedis-->
<!--        so use jedis-->
<!--        or use jedis directly import the jedis dependency-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.12.7</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <!--  Starting with Spring Boot 3, the default JSON library changes from Jackson to
        Jakarta EE-based JSON-B (via Eclipse Yasson). However, Jackson is still widely
        used and supported, but it is not included by default in some starter dependencies.
        If you need Jackson in Spring Boot 3, you should explicitly add the Jackson dependencies
         (like jackson-databind) in your pom.xml. In Spring Boot 2.x, Jackson was included
         automatically with spring-boot-starter-web, but in Spring Boot 3.x, you may need to
         add it yourself for full compatibility.
        The jackson-databind library is used for converting (serializing and deserializing)
         Java objects to and from JSON. It is a core part of the Jackson JSON processor, commonly
         used in Spring Boot applications for handling JSON data in REST APIs.-->

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>


        <!--  If you use Spring Data JPA with Spring Boot, you usually do not need to manually
        add both validation-api and hibernate-validator dependencies. Spring Boot’s starter
        ,dependencies will transitively include the necessary validation libraries for you.
        Only add them if you need a specific version or special features. For most projects,
        you can safely remove these two dependencies. -->
<!--        <dependency>-->
<!--            <groupId>jakarta.validation</groupId>-->
<!--            <artifactId>jakarta.validation-api</artifactId>-->
<!--            <version>3.1.1</version>-->
<!--        </dependency>-->


        <!-- https://mvnrepository.com/artifact/cn.hutool/hutool-core -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-core</artifactId>
            <version>5.8.40</version>
        </dependency>


        <!-- The flexmark-all dependency is a comprehensive Markdown parser and renderer for Java.
         It allows your application to convert Markdown text into HTML or other formats, and supports
          many Markdown extensions and features. This library is useful if you need to process, display,
          or transform Markdown content, such as user-generated notes, documentation, or blog posts,
          within your Java application.
        https://mvnrepository.com/artifact/com.vladsch.flexmark/flexmark-all -->
        <dependency>
            <groupId>com.vladsch.flexmark</groupId>
            <artifactId>flexmark-all</artifactId>
            <version>0.64.8</version>

        </dependency>


        <!--. They provide support for XML binding (JAXB), which is used for converting Java objects to and from XML.

You only need these dependencies if your project works with XML data directly (for example, reading/writing XML
 files or using XML-based configuration).
         https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api -->
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>4.0.4</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime -->
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>4.0.5</version>
        </dependency>


        <!--  for chinese words 添加 jieba 分词依赖 -->
<!--        <dependency>-->
<!--            <groupId>com.huaban</groupId>-->
<!--            <artifactId>jieba-analysis</artifactId>-->
<!--            <version>1.0.2</version>-->
<!--        </dependency>-->
        <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-core -->
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
            <version>10.3.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analysis-common -->
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analysis-common</artifactId>
            <version>10.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.19.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.5.4</version>
                <configuration>
                    <argLine>
                        -javaagent:"${settings.localRepository}/net/bytebuddy/byte-buddy-agent/1.17.7/byte-buddy-agent-1.17.7.jar"
                    </argLine>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
